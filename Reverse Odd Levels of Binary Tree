Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.
For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.
A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.
The level of a node is the number of edges along the path between it and the root node.

Code:
(propesed two method,using 3 vectors & 2 vectors)
TreeNode* reverseOddLevels(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        int i=0;
        // vector<TreeNode*>prev;
        vector<int>v;
        while(!q.empty()){
            int s=q.size();
            // vector<int>temp;
            // vector<TreeNode*>v;
            vector<int>a;
            while(s!=0){
                TreeNode* t=q.front();
                // v.push_back(t);
                // a.push_back(t->val);
                q.pop();
                if(i%2==1){
                    t->val=v[s-1];
                    
                }
                if(t->left){
                    q.push(t->left);
                    a.push_back(t->left->val);
                }
                if(t->right){
                    q.push(t->right);
                    a.push_back(t->right->val);
                }
                s--;
            }
//             if(i%2==1){
//                 int k=a.size()-1;
//                 for(auto x:prev){
//                     x->left->val=a[k];
//                     x->right->val=a[k-1];
//                     k-=2;
//                 }
                
//             }
            // prev=v;
            v=a;
            i++;
        }
        return root;
    }
